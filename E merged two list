public class MergeTwoSortedLists {

    public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        ListNode dummy = new ListNode(0);
        ListNode current = dummy;

        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                current.next = l1;
                l1 = l1.next;
            } else {
                current.next = l2;
                l2 = l2.next;
            }
            current = current.next;
        }

        if (l1 != null) {
            current.next = l1;
        } else {
            current.next = l2;
        }

        return dummy.next;
    }

    public static void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ListNode list1 = new ListNode(1);
        list1.next = new ListNode(2);
        list1.next.next = new ListNode(4);

        ListNode list2 = new ListNode(1);
        list2.next = new ListNode(3);
        list2.next.next = new ListNode(4);

        ListNode mergedList = mergeTwoLists(list1, list2);
        printList(mergedList);  // Output: 1 1 2 3 4 4

        ListNode emptyList1 = null;
        ListNode emptyList2 = null;
        mergedList = mergeTwoLists(emptyList1, emptyList2);
        printList(mergedList);  // Output: (empty)

        ListNode emptyList = null;
        ListNode singleElementList = new ListNode(0);
        mergedList = mergeTwoLists(emptyList, singleElementList);
        printList(mergedList);  // Output: 0
    }
}

class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
}
